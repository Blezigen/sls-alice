<?php

namespace common\models;

use filsh\yii2\oauth2server\Response;
use OAuth2\Storage\UserCredentialsInterface;
use Yii;
use yii\web\IdentityInterface;

/**
 * This is the model class for table "{{%users}}".
 */
class User extends \common\database\User implements IdentityInterface, UserCredentialsInterface
{
    public function behaviors()
    {
        return array_merge(parent::behaviors(), [

        ]); // TODO: Change the autogenerated stub
    }


    public function getSetting($section, $key, $default = null)
    {
        return Yii::$app->settings->getRoleSettings(
            $this->role,
            $section,
            $key,
            $default
        );
    }

    public function setSetting($section, $key, $value)
    {
        Yii::$app->settings->setValue(
            $section,
            $key,
            $value,
        );
    }

    public function getRole()
    {
        return 'role';
    }

    public function setRole($role)
    {
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return array_merge(parent::rules(), [
            [['username'], 'unique'],
            [['role'], 'required'],
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function extraFields()
    {
        return array_merge(parent::extraFields(), [
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return array_merge(parent::attributeLabels(), [
            //'id' => 'ID',
            //'status_id' => 'Status ID',
            //'username' => 'Username',
            //'password_hash' => 'Password Hash',
            //'password_reset_token' => 'Password Reset Token',
            //'auth_key' => 'Auth Key',
            //'last_login_at' => 'Last Login At',
            //'deleted_at' => 'Deleted At',
            //'archived_at' => 'Archived At',
            //'created_at' => 'Created At',
            //'updated_at' => 'Updated At',
        ]);
    }

    public static function findIdentity($id)
    {
        return static::findOne([
            'id' => $id,
            /* 'status_id' => self::STATUS_ACTIVE */
        ]);
    }

    public static function findIdentityByAccessToken($token, $type = null)
    {
        /** @var $module \filsh\yii2\oauth2server\Module */
        $module = \Yii::$app->getModule('oauth2');

        if ($module->getServer()->verifyResourceRequest()) {
            $request = \filsh\yii2\oauth2server\Request::createFromGlobals();
            $response = new Response();
            if ($response->getParameter('error') === null) {
                $token = $module->getServer()
                    ->getAccessTokenData($request, $response);

                return static::findIdentity($token['user_id']);
            }
        }
        throw new \yii\web\NotFoundHttpException('Пользователь не найден');
    }

    public function getId()
    {
        return $this->getPrimaryKey();
    }

    public function getAuthKey()
    {
        return $this->auth_key;
    }

    public static function findByUsername($username)
    {
        $entityQuery = static::find()->andWhere([
            'username' => $username,
            /* 'status_id' => self::STATUS_ACTIVE */
        ]);
        return $entityQuery->one();
    }

    public function validatePassword($password)
    {
        return Yii::$app->security->validatePassword($password,
            $this->password_hash);
    }

    public function setPassword($password)
    {
        $this->password_hash
            = Yii::$app->security->generatePasswordHash($password);
    }

    public function generatePasswordResetToken()
    {
        $this->password_reset_token
            = Yii::$app->security->generateRandomString() . '_' . time();
    }

    public function generatePasswordResetTokenByCode($code)
    {
        $this->password_reset_token = md5($code) . '_' . time();
    }

    public function removePasswordResetToken()
    {
        $this->password_reset_token = null;
    }

    public function checkUserCredentials($username, $password)
    {
        $user = self::findByUsername($username);
        if (!$user) {
            return false;
        }

        return $user->validatePassword($password);
    }

    public function validateAuthKey($authKey)
    {
        return $this->getAuthKey() === $authKey;
    }

    public function getUserDetails($username)
    {
        $user = static::find()->select('id')
            ->andWhere(['username' => $username])->one();

        return $user->toArray();
    }
}
